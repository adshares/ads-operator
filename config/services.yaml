# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    api_version: 'v1'
    entityMap:
        Block: '\Adshares\AdsOperator\Document\Block'
        Message: '\Adshares\AdsOperator\Document\Message'
        Account: '\Adshares\AdsOperator\Document\Account'
        Node: '\Adshares\AdsOperator\Document\Node'
        BroadcastTransaction: '\Adshares\AdsOperator\Document\Transaction\BroadcastTransaction'
        ConnectionTransaction: '\Adshares\AdsOperator\Document\Transaction\ConnectionTransaction'
        EmptyTransaction: '\Adshares\AdsOperator\Document\Transaction\EmptyTransaction'

        KeyTransaction: '\Adshares\AdsOperator\Document\Transaction\KeyTransaction'
        LogAccountTransaction: '\Adshares\AdsOperator\Document\Transaction\LogAccountTransaction'
        NetworkTransaction: '\Adshares\AdsOperator\Document\Transaction\NetworkTransaction'
        SendManyTransaction: '\Adshares\AdsOperator\Document\Transaction\SendManyTransaction'
        SendOneTransaction: '\Adshares\AdsOperator\Document\Transaction\SendOneTransaction'
        StatusTransaction: '\Adshares\AdsOperator\Document\Transaction\StatusTransaction'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Adshares\AdsOperator\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    Adshares\AdsOperator\EventListener\ApiExceptionListener:
        arguments:
          $environment: '%env(APP_ENV)%'
          $logger: '@logger'
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    Adshares\AdsOperator\EventListener\ResponseListener:
      arguments:
        $logger: '@logger'
      tags:
        - { name: kernel.event_listener, event: kernel.response }

    Adshares\AdsOperator\Controller\ApiController:
        calls:
            - [setSerializer, ['@jms_serializer']]

    Adshares\AdsOperator\Controller\Blockexplorer\InfoController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
            $repository: '@Adshares\AdsOperator\Repository\Doctrine\InfoRepository'
            $genesisTime: '%env(GENESIS_TIME)%'

    Adshares\AdsOperator\Controller\Blockexplorer\StatsController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
            $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\NodeController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
          $repository: '@Adshares\AdsOperator\Repository\Doctrine\NodeRepository'
          $accountRepository: '@Adshares\AdsOperator\Repository\Doctrine\AccountRepository'
          $messageRepository: '@Adshares\AdsOperator\Repository\Doctrine\MessageRepository'
          $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\BlockController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
          $repository: '@Adshares\AdsOperator\Repository\Doctrine\BlockRepository'
          $messageRepository: '@Adshares\AdsOperator\Repository\Doctrine\MessageRepository'
          $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\AccountController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
          $repository: '@Adshares\AdsOperator\Repository\Doctrine\AccountRepository'
          $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\MessageController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
          $repository: '@Adshares\AdsOperator\Repository\Doctrine\MessageRepository'
          $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\TransactionController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
          $repository: '@Adshares\AdsOperator\Repository\Doctrine\TransactionRepository'

    Adshares\AdsOperator\Controller\Blockexplorer\SnapshotController:
      parent: Adshares\AdsOperator\Controller\ApiController
      public: true
      autowire: false
      autoconfigure: false
      arguments:
        $repository: '@Adshares\AdsOperator\Repository\Doctrine\SnapshotRepository'
        $nodeRepository: '@Adshares\AdsOperator\Repository\Doctrine\SnapshotNodeRepository'
        $accountRepository: '@Adshares\AdsOperator\Repository\Doctrine\SnapshotAccountRepository'

    Adshares\AdsOperator\Controller\Auth\AuthController:
      parent: Adshares\AdsOperator\Controller\ApiController
      public: true
      autowire: false
      autoconfigure: false
      arguments:
        $userRegistration: '@Adshares\AdsOperator\UseCase\UserRegistration'

    Adshares\AdsOperator\Validator\DocumentValidator:
        arguments: ['@validator']

    Adshares\AdsOperator\Controller\Auth\UserController:
        parent: Adshares\AdsOperator\Controller\ApiController
        public: true
        autowire: false
        autoconfigure: false
        arguments:
            $tokenStorage: '@security.token_storage'
            $changeUserEmail: '@Adshares\AdsOperator\UseCase\ChangeUserEmail'
            $confirmChangeUserEmail: '@Adshares\AdsOperator\UseCase\ConfirmChangeUserEmail'
            $changeUserPassword: '@Adshares\AdsOperator\UseCase\ChangeUserPassword'
            $changeUserKey: '@Adshares\AdsOperator\UseCase\Transaction\ChangeUserKey'
            $confirmChangeUserKey: '@Adshares\AdsOperator\UseCase\Transaction\ConfirmChangeUserKey'

    Adshares\AdsOperator\Controller\ExchangeRate\ExchangeRateController:
      parent: Adshares\AdsOperator\Controller\ApiController
      public: true
      autowire: false
      autoconfigure: false
      arguments:
        $repository: '@Adshares\AdsOperator\Repository\Doctrine\ExchangeRateRepository'

    Adshares\AdsOperator\UseCase\UserRegistration:
      class: Adshares\AdsOperator\UseCase\UserRegistration
      arguments:
        $userRepository: '@Adshares\AdsOperator\Repository\Doctrine\UserRepository'
        $validator: '@Adshares\AdsOperator\Validator\DocumentValidator'
        $userPasswordEncoder: '@security.password_encoder'

    Adshares\AdsOperator\UseCase\ChangeUserEmail:
      arguments:
        $repository: '@Adshares\AdsOperator\Repository\Doctrine\UserRepository'
        $queue: '@Adshares\AdsOperator\Queue\QueueEngine'
        $passwordChecker: '@Adshares\AdsOperator\Auth\PasswordChecker'
        $logger: '@logger'

    Adshares\AdsOperator\UseCase\ChangeUserPassword:
      class: Adshares\AdsOperator\UseCase\ChangeUserPassword
      arguments:
        $userRepository: '@Adshares\AdsOperator\Repository\Doctrine\UserRepository'
        $passwordChecker: '@Adshares\AdsOperator\Auth\PasswordChecker'
        $passwordEncoder: '@security.password_encoder'

    Adshares\AdsOperator\Auth\PasswordChecker:
      arguments:
        $encoderFactory: '@security.encoder_factory'

    Adshares\AdsOperator\AdsImporter\Database\MongoMigration:
        arguments:
            $connection: '@doctrine_mongodb.odm.default_connection'
            $databaseName: '%env(MONGODB_DB)%'
            $logger: '@logger'

    Adshares\AdsOperator\Repository\Doctrine\InfoRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Info']

    Adshares\AdsOperator\Repository\Doctrine\NodeRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Node']

    Adshares\AdsOperator\Repository\Doctrine\BlockRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Block']

    Adshares\AdsOperator\Repository\Doctrine\AccountRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Account']

    Adshares\AdsOperator\Repository\Doctrine\MessageRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Message']

    Adshares\AdsOperator\Repository\Doctrine\TransactionRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\Transaction']

    Adshares\AdsOperator\Repository\Doctrine\SnapshotRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\Snapshot']

    Adshares\AdsOperator\Repository\Doctrine\SnapshotNodeRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\SnapshotNode']

    Adshares\AdsOperator\Repository\Doctrine\SnapshotAccountRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\SnapshotAccount']

    Adshares\AdsOperator\Repository\Doctrine\UserRepository:
        class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
        factory: 'doctrine.odm.mongodb.document_manager:getRepository'
        arguments: ['Adshares\AdsOperator\Document\User']

    Adshares\AdsOperator\Repository\Doctrine\LocalTransactionRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\LocalTransaction']

    Adshares\AdsOperator\Repository\Doctrine\ExchangeRateHistoryRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\ExchangeRateHistory']

    Adshares\AdsOperator\Repository\Doctrine\ExchangeRateRepository:
      class: Doctrine\ODM\MongoDB\Repository\DocumentRepository
      factory: 'doctrine.odm.mongodb.document_manager:getRepository'
      arguments: ['Adshares\AdsOperator\Document\ExchangeRate']

    Adshares\AdsOperator\AdsImporter\Importer:
        arguments:
            $client: '@Vendor\Adshares\Ads\AdsClient'
            $databaseMigration: '@Adshares\AdsOperator\AdsImporter\Database\MongoMigration'
            $logger: '@logger'
            $totalSupply: '%env(TOTAL_SUPPLY)%'
            $amountPrecision: '%env(AMOUNT_PRECISION)%'
            $genesisTime: '%env(GENESIS_TIME)%'
            $blockLength: '%env(BLOCK_LENGTH)%'
            $nonCirculatingAccounts: '%env(NON_CIRCULATING_ACCOUNTS)%'

    Adshares\AdsOperator\Queue\QueueEngine:
      class: Adshares\AdsOperator\Queue\RabbitMQ
      arguments:
        $connection: '@Vendor\PhpAmqpLib\Connection\AMQPStreamConnection'

    Adshares\AdsOperator\Command\SendChangeEmailConfirmationCommand:
      class: Adshares\AdsOperator\Command\SendChangeEmailConfirmationCommand
      arguments:
        $queue: '@Adshares\AdsOperator\Queue\QueueEngine'

    Adshares\AdsOperator\UseCase\SendChangeUserEmailConfirmation:
      class: Adshares\AdsOperator\UseCase\SendChangeUserEmailConfirmation
      arguments:
        $userRepository: '@Adshares\AdsOperator\Repository\Doctrine\UserRepository'
        $emailProvider: '@Adshares\AdsOperator\Mail\MailerEngine'
        $template: '@Adshares\AdsOperator\Template\TemplateEngine'
        $templatePath: '%env(CHANGE_EMAIL_CONFIRMATION_TEMPLATE)%'
        $senderEmail: '%env(MAILER_SENDER)%'
        $subject: 'Confirm your request about changing an email address'
        $url: '%env(API_URI)%/api/%api_version%'
        $logger: '@logger'

    Adshares\AdsOperator\UseCase\ConfirmChangeUserEmail:
      class: Adshares\AdsOperator\UseCase\ConfirmChangeUserEmail
      arguments:
        $userRepository: '@Adshares\AdsOperator\Repository\Doctrine\UserRepository'


    Adshares\AdsOperator\UseCase\Transaction\ChangeUserKey:
      class: Adshares\AdsOperator\UseCase\Transaction\ChangeUserKey
      arguments:
        $transaction: '@Adshares\AdsOperator\UseCase\Transaction\RunTransaction'
        $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\LocalTransactionRepository'

    Adshares\AdsOperator\UseCase\Transaction\ConfirmChangeUserKey:
      class: Adshares\AdsOperator\UseCase\Transaction\ConfirmChangeUserKey
      arguments:
        $transaction: '@Adshares\AdsOperator\UseCase\Transaction\RunTransaction'
        $transactionRepository: '@Adshares\AdsOperator\Repository\Doctrine\LocalTransactionRepository'

    Adshares\AdsOperator\UseCase\Transaction\RunTransaction:
      class: Adshares\AdsOperator\UseCase\Transaction\RunTransaction
      arguments:
        $adsClient: '@Vendor\Adshares\Ads\AdsClient'

    Adshares\AdsOperator\Mail\MailerEngine:
      class: Adshares\AdsOperator\Mailer\SwiftMailer
      arguments:
        $mailer: '@swiftmailer.mailer'

    Adshares\AdsOperator\Template\TemplateEngine:
      class: Adshares\AdsOperator\Template\TwigTemplate
      arguments:
        $template: '@twig'

    Adshares\AdsOperator\Exchange\Provider\Client\CoinGecko:
      class: Adshares\AdsOperator\Exchange\Provider\Client\CoinGecko
      arguments:
        $serviceUrl: '%env(EXCHANGE_PROVIDER_COINGECKO_SERVICE_URL)%'
        $id: '%env(EXCHANGE_PROVIDER_COINGECKO_ID)%'
        $timeout: '%env(EXCHANGE_PROVIDER_TIMEOUT)%'
      tags: ['adshares.adsoperator.exchange']

    Adshares\AdsOperator\Exchange\Provider\Client\CoinMarketCap:
      class: Adshares\AdsOperator\Exchange\Provider\Client\CoinMarketCap
      arguments:
        $serviceUrl: '%env(EXCHANGE_PROVIDER_CMP_SERVICE_URL)%'
        $key: '%env(EXCHANGE_PROVIDER_CMP_KEY)%'
        $timeout: '%env(EXCHANGE_PROVIDER_TIMEOUT)%'
      tags: ['adshares.adsoperator.exchange']

    Adshares\AdsOperator\Exchange\Provider\Provider:
      arguments: [!tagged adshares.adsoperator.exchange]

    Vendor\PhpAmqpLib\Connection\AMQPStreamConnection:
        class: PhpAmqpLib\Connection\AMQPStreamConnection
        lazy: true
        arguments:
          $host: '%env(QUEUE_HOST)%'
          $port: '%env(QUEUE_PORT)%'
          $user: '%env(QUEUE_USER)%'
          $password: '%env(QUEUE_PASSWORD)%'
          $vhost: '%env(QUEUE_VHOST)%'

    Vendor\Adshares\Ads\Driver\CliDriver:
        class: Adshares\Ads\Driver\CliDriver
        arguments:
            $address: '%env(ADS_ADDRESS)%'
            $secret: '%env(ADS_SECRET)%'
            $host: '%env(ADS_HOST)%'
            $port: '%env(ADS_PORT)%'
            $logger: '@logger'
        calls:
            - method: setWorkingDir
              arguments: ['%env(ADS_WORKING_DIR)%']
            - method: setCommand
              arguments: ['%env(ADS_BINARY)%']


    Vendor\Adshares\Ads\AdsClient:
        class: Adshares\Ads\AdsClient
        arguments:
            $driver: '@Vendor\Adshares\Ads\Driver\CliDriver'
        calls:
            - method: setEntityMap
              arguments:
                  - '%entityMap%'
